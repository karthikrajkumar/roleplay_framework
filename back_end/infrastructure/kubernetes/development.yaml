---
# Development Kubernetes Manifests for AI Roleplay Platform
# Simplified configuration for local development with minimal resource usage

apiVersion: v1
kind: Namespace
metadata:
  name: roleplay-platform
  labels:
    name: roleplay-platform
    environment: development

---
# ConfigMap for shared configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config
  namespace: roleplay-platform
data:
  environment: "development"
  log_level: "DEBUG"
  database_url: "postgresql+asyncpg://roleplay_user:$(POSTGRES_PASSWORD)@postgres:5432/roleplay_platform"
  redis_url: "redis://:$(REDIS_PASSWORD)@redis:6379/0"

---
# PostgreSQL for Development (single instance)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: roleplay-platform
  labels:
    app: postgres
    tier: database
    environment: development
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
        tier: database
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
          name: postgres
        env:
        - name: POSTGRES_DB
          value: roleplay_platform
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: username
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: password
        - name: POSTGRES_INITDB_ARGS
          value: "--auth-host=md5"
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - roleplay_user
            - -d
            - roleplay_platform
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - roleplay_user
            - -d
            - roleplay_platform
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
      volumes:
      - name: postgres-data
        emptyDir: {}

---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: roleplay-platform
  labels:
    app: postgres
spec:
  ports:
  - port: 5432
    targetPort: 5432
    name: postgres
  selector:
    app: postgres
  type: ClusterIP

---
# Redis for Development (single instance)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: roleplay-platform
  labels:
    app: redis
    tier: cache
    environment: development
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
        tier: cache
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
          name: redis
        command:
        - redis-server
        - --appendonly
        - "yes"
        - --maxmemory
        - "256mb"
        - --maxmemory-policy
        - "allkeys-lru"
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-secret
              key: password
        volumeMounts:
        - name: redis-data
          mountPath: /data
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: redis-data
        emptyDir: {}

---
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: roleplay-platform
  labels:
    app: redis
spec:
  ports:
  - port: 6379
    targetPort: 6379
    name: redis
  selector:
    app: redis
  type: ClusterIP

---
# API Gateway Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-gateway
  namespace: roleplay-platform
  labels:
    app: api-gateway
    tier: application
    app.kubernetes.io/name: api-gateway
    app.kubernetes.io/part-of: roleplay-platform
spec:
  replicas: 1
  selector:
    matchLabels:
      app: api-gateway
  template:
    metadata:
      labels:
        app: api-gateway
        tier: application
    spec:
      containers:
      - name: api-gateway
        image: localhost:5001/roleplay-platform-api-gateway:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
          name: http
        env:
        - name: DATABASE_URL
          value: "postgresql+asyncpg://roleplay_user:$(POSTGRES_PASSWORD)@postgres:5432/roleplay_platform"
        - name: REDIS_URL
          value: "redis://:$(REDIS_PASSWORD)@redis:6379/0"
        - name: ENVIRONMENT
          value: "development"
        - name: LOG_LEVEL
          value: "DEBUG"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: password
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-secret
              key: password
        resources:
          requests:
            memory: "256Mi"
            cpu: "125m"
          limits:
            memory: "512Mi"
            cpu: "250m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3

---
apiVersion: v1
kind: Service
metadata:
  name: api-gateway
  namespace: roleplay-platform
  labels:
    app: api-gateway
spec:
  ports:
  - port: 8000
    targetPort: 8000
    nodePort: 30000
    name: http
  selector:
    app: api-gateway
  type: NodePort

---
# User Management Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: user-management
  namespace: roleplay-platform
  labels:
    app: user-management
    tier: application
    app.kubernetes.io/name: user-management
    app.kubernetes.io/part-of: roleplay-platform
spec:
  replicas: 1
  selector:
    matchLabels:
      app: user-management
  template:
    metadata:
      labels:
        app: user-management
        tier: application
    spec:
      containers:
      - name: user-management
        image: localhost:5001/roleplay-platform-user-management:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8001
          name: http
        env:
        - name: DATABASE_URL
          value: "postgresql+asyncpg://roleplay_user:$(POSTGRES_PASSWORD)@postgres:5432/roleplay_platform"
        - name: REDIS_URL
          value: "redis://:$(REDIS_PASSWORD)@redis:6379/1"
        - name: ENVIRONMENT
          value: "development"
        - name: LOG_LEVEL
          value: "DEBUG"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: password
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-secret
              key: password
        resources:
          requests:
            memory: "256Mi"
            cpu: "125m"
          limits:
            memory: "512Mi"
            cpu: "250m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8001
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            path: /health
            port: 8001
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3

---
apiVersion: v1
kind: Service
metadata:
  name: user-management
  namespace: roleplay-platform
  labels:
    app: user-management
spec:
  ports:
  - port: 8001
    targetPort: 8001
    nodePort: 30001
    name: http
  selector:
    app: user-management
  type: NodePort

---
# AI Orchestration Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ai-orchestration
  namespace: roleplay-platform
  labels:
    app: ai-orchestration
    tier: application
    app.kubernetes.io/name: ai-orchestration
    app.kubernetes.io/part-of: roleplay-platform
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ai-orchestration
  template:
    metadata:
      labels:
        app: ai-orchestration
        tier: application
    spec:
      containers:
      - name: ai-orchestration
        image: localhost:5001/roleplay-platform-ai-orchestration:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8003
          name: http
        env:
        - name: DATABASE_URL
          value: "postgresql+asyncpg://roleplay_user:$(POSTGRES_PASSWORD)@postgres:5432/roleplay_platform"
        - name: REDIS_URL
          value: "redis://:$(REDIS_PASSWORD)@redis:6379/3"
        - name: ENVIRONMENT
          value: "development"
        - name: LOG_LEVEL
          value: "DEBUG"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: password
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-secret
              key: password
        - name: OPENAI_API_KEY
          valueFrom:
            secretKeyRef:
              name: ai-api-secret
              key: openai-api-key
        - name: ANTHROPIC_API_KEY
          valueFrom:
            secretKeyRef:
              name: ai-api-secret
              key: anthropic-api-key
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8003
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            path: /health
            port: 8003
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3

---
apiVersion: v1
kind: Service
metadata:
  name: ai-orchestration
  namespace: roleplay-platform
  labels:
    app: ai-orchestration
spec:
  ports:
  - port: 8003
    targetPort: 8003
    nodePort: 30003
    name: http
  selector:
    app: ai-orchestration
  type: NodePort

---
# Monitoring - Grafana
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: roleplay-platform
  labels:
    app: grafana
    tier: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
        tier: monitoring
    spec:
      containers:
      - name: grafana
        image: grafana/grafana:latest
        ports:
        - containerPort: 3000
          name: http
        env:
        - name: GF_SECURITY_ADMIN_USER
          value: admin
        - name: GF_SECURITY_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: monitoring-secret
              key: grafana-admin-password
        - name: GF_INSTALL_PLUGINS
          value: "grafana-kubernetes-app"
        volumeMounts:
        - name: grafana-storage
          mountPath: /var/lib/grafana
        resources:
          requests:
            memory: "256Mi"
            cpu: "125m"
          limits:
            memory: "512Mi"
            cpu: "250m"
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 60
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 10
          periodSeconds: 5
      volumes:
      - name: grafana-storage
        emptyDir: {}

---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: roleplay-platform
  labels:
    app: grafana
spec:
  ports:
  - port: 3000
    targetPort: 3000
    nodePort: 30010
    name: http
  selector:
    app: grafana
  type: NodePort

---
# Network Policy for Development (permissive)
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: development-network-policy
  namespace: roleplay-platform
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - {}
  egress:
  - {}